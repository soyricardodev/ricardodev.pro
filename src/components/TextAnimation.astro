<span class="magic">
  <span class="magic-star">
    <svg viewBox="0 0 512 512">
      <path
        d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
      ></path>
    </svg>
  </span>
  <span class="magic-star">
    <svg viewBox="0 0 512 512">
      <path
        d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
      ></path>
    </svg>
  </span>
  <span class="magic-star">
    <svg viewBox="0 0 512 512">
      <path
        d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
      ></path>
    </svg>
  </span>
  <span class="magic-text">
    <slot />
  </span>
</span>

<script>
  const rand = (min: number, max: number) =>
    Math.floor(Math.random() * (max - min + 1)) + min;

  const animate = (star: HTMLElement) => {
    star.style.setProperty("--star-left", `${rand(-10, 100)}%`);
    star.style.setProperty("--star-top", `${rand(-40, 80)}%`);

    star.style.animation = "none";
    star.offsetHeight;
    star.style.animation = "";
  };

  let timeouts: NodeJS.Timeout[] = [];
  let intervals: NodeJS.Timeout[] = [];

  const magic = document.querySelector(".magic")! as HTMLElement;

  magic.addEventListener("mouseenter", () => {
    let index = 1;

    const stars = document.getElementsByClassName(
      "magic-star",
    ) as HTMLCollectionOf<HTMLElement>;

    for (const star of stars) {
      timeouts.push(
        setTimeout(() => {
          animate(star);

          const intervalToPush = setInterval(() => animate(star), 1000);

          intervals.push(intervalToPush);
        }, index++ * 300),
      );
    }
  });

  magic.addEventListener("mouseleave", () => {
    for (const t of timeouts) clearTimeout(t);
    for (const i of intervals) clearInterval(i);

    timeouts = [];
    intervals = [];
  });
</script>

<style>
  /* :root {
    --purple: rgb(123, 31, 162);
    --yellow: rgb(103, 58, 183);
    --pink: rgb(244, 143, 177);
  } */

  @keyframes background-pan {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes scale {
    from,
    to {
      transform: scale(0);
    }

    50% {
      transform: scale(1);
    }
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(180deg);
    }
  }

  .magic {
    @apply relative inline-block cursor-default;
  }

  .magic-text {
    @apply font-bold;
  }

  .magic > .magic-star {
    --size: clamp(20px, 1.5vw, 30px);
    animation: scale 700ms ease forwards;
    height: var(--size);
    left: var(--star-left);
    top: var(--star-top);
    width: var(--size);
    @apply absolute block;
  }

  .magic > .magic-star > svg {
    animation: rotate 1000ms linear infinite;
    @apply block opacity-70;
  }

  .magic > .magic-star > svg > path {
    fill: var(--yellow);
  }

  .magic > .magic-text {
    animation: background-pan 3s linear infinite;
    background: linear-gradient(
      to right,
      var(--yellow),
      var(--orange),
      var(--pink),
      var(--blue),
      var(--cyan),
      var(--green),
      var(--lime)
    );
    background-size: 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    white-space: nowrap;
  }
</style>
